#!/usr/bin/env python
import click
import os
import sys
from opentutor_classifier import TrainingConfig
from opentutor_classifier.training import train_data_root, train_default_data_root
from opentutor_classifier.sync import sync as _sync


@click.group()
def cli():
    pass


@cli.command()
@click.option("-p", "--data", required=False, type=click.Path(exists=True))
@click.option("-s", "--shared", required=False, type=click.Path(exists=True))
@click.option("-a", "--apikey", required=True, type=click.Path(exists=False))
@click.option("-o", "--output", required=False, type=click.Path(exists=False))
def train(data: str, shared: str, api_key:str, output: str):
    auth_headers={
        "opentutor-api-req": "true",
        "Authorization": f"bearer {api_key}",
    }
    result = train_data_root(
        data_root=data, config=TrainingConfig(shared_root=shared), output_dir=output, auth_headers=auth_headers
    )
    print(f"Models are saved at: {result.models}", file=sys.stdout)
    for exp_num, exp_result in enumerate(result.expectations):
        print(
            f"Accuracy for model={exp_num} is {exp_result.accuracy}.", file=sys.stdout
        )


@cli.command()
@click.option("-p", "--data", required=False, type=click.Path(exists=True))
@click.option("-s", "--shared", required=False, type=click.Path(exists=True))
@click.option("-a", "--apikey", required=True, type=click.Path(exists=False))
@click.option("-o", "--output", required=False, type=click.Path(exists=False))
def traindefault(data: str, shared: str, api_key: str, output: str):
    auth_headers={
        "opentutor-api-req": "true",
        "Authorization": f"bearer {api_key}",
    }
    training = train_default_data_root(
        data_root=data, shared_root=shared, output_dir=output, auth_headers=auth_headers
    )
    accuracy = training.default_train_all(data_root=data, output_dir=output)
    print("Models are saved at: " + output)
    print(f"Accuracy for model is {accuracy}")


@cli.command()
@click.option("-p", "--lesson", required=True)
@click.option("-s", "--url", required=True)
@click.option("-a", "--apikey", required=True)
@click.option("-o", "--output", required=False)
def sync(lesson: str, url: str, api_key: str, output: str):
    data_path = os.path.join(output, lesson)
    _sync(lesson, url, api_key, data_path)
    print(f"Data is saved at: {data_path}")


cli.add_command(train)
cli.add_command(traindefault)
cli.add_command(sync)

if __name__ == "__main__":
    cli()
